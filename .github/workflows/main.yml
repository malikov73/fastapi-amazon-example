name: CI/CD Pipeline

on:
  push:
    branches: [ main ]


jobs:

  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      # Step 1
      - uses: actions/checkout@v2

      # Step 2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: x64
      # Step 3
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      # Step 4
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      # Step 5
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      # Step 6
      - name: Install project
        run: poetry install --no-interaction
      # Step 7
      - name: Run Linters
        run: poetry run pylint app tests
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/
      # Step 8
      - name: Create Zipfile archive of Dependencies
        run: |
          ls -a
          cd .venv/lib/
          ls -a
          cd python3.9/site-packages/
          ls -a
          zip -r9 ../../../../api.zip .

      # Step 9
      - name: Add App to Zip file
        run: cd ./app && zip -g ../api.zip -r .

      # Step 10
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      # Step 2
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v2
        with:
          name: api
  # Step 3
      - name: Upload to S3
        run: aws s3 cp api.zip s3://fastapi-example-lambda/api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  # Step 4
      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name fastapi-example --s3-bucket fastapi-example-lambda --s3-key api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
